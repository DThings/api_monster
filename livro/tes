swagger: "2.0"
info:
  description: "Criação de uma API com nodeJS, para disponibilizar dados do livro de Monstros do D&D 5e, esse projeto é um trabalho em grupo da materia Arquitetura de computadores, que visa colaborar com a comunidade de RPG de mesa. "
  version: "1.0.0"
  title: "API Monster D&D"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "laurencio.arkauss@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "0.0.0.0:8085"
tags:
- name: "Monstro"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "https://github.com/laurencioScript/api_monster"
schemes:
- "https"
- "http"
paths:
  /monster/register:
    post:
      tags:
      - "Monstro"
      summary: "Cadastra os monstros no banco de dados."
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cadastra os monstros no banco de dados."
        required: true
        schema:
          $ref: "#/definitions/Register"
      responses:
        200:
          description: "Exibe todos os monstros cadastrados"
        400:
          description: "Error: [error especific]"
  
  /monster/getMonsterId=id:
    get:
      tags:
      - "Monstro"
      summary: "Retorna todos os dados de um monstro especifico."
      description: "Retorna todos os dados de um monstro especifico."
      operationId: "getMonsterId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID do monstro"
        required: true
        type: "integer"
      responses:
        200:
          description: "sucesso na operação"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
    
  /monster/getMonsterName=name:
    get:
      tags:
      - "Monstro"
      summary: "Retorna todos os dados de um monstro especifico."
      description: "Retorna todos os dados de um monstro especifico."
      operationId: "getMonsterName"
      produces:
      - "application/json"
      parameters:
      - name: "nome"
        in: "path"
        description: "nome do monstro"
        required: true
        type: "string"
      responses:
        200:
          description: "sucesso na operação"
        400:
          description: "error [object error]"

  /monster/getMonster=tipo,tamanho,desafio,tendencia,ca,pv:
    get:
      tags:
      - "Monstro"
      summary: "Returna um array de monstros"
      description: "Busca todos os monstros de acordo com o parametros passados, não deixe espaço vazio substitua por null"
      operationId: "getMonster"
      produces:
      - "application/json"
      parameters:
      - name: "tipo"
        in: "path"
        description: "tipo do monstro"
        required: true
        type: "string"
      - name: "tamanho"
        in: "path"
        description: "tamanho do monstro"
        required: true
        type: "string"
      - name: "desafio"
        in: "path"
        description: "desafio do monstro"
        required: true
        type: "string"
      - name: "tendencia"
        in: "path"
        description: "tendencia do monstro(sigla em capslock)"
        required: true
        type: "string"
      - name: "ca"
        in: "path"
        description: "classe de armadura do monstro"
        required: true
        type: "integer"
      - name: "pv"
        in: "path"
        description: "pontos de vida do monstro"
        required: true
        type: "string"
      responses:
        200:
          description: "sucesso na operação"
        400:
          description: "error [object error]"






  
definitions:
  Register:
    type: array
    items:
      type: object
      properties:
        desafio:
          type: integer
        xp:
          type: integer
        nome:
          type: string
        tipo:
          type: string
        tamanho:
          type: string
        tendencia:
          type: string
        pv:
          type: string
        ca:
          type: integer
    
      
      
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"